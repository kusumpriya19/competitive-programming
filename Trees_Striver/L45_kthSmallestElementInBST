Here we can Use Inorder Traversal (left Root Right) and store in a stack. If we use inorder traversal in BST then it is already sorted .
Take a cnt = 0 and whenever we reach a node you can cnt++. and when cnt==k we should return node->val.
Time Complexity - o(n) and space complexity - o(n)
You can find deatiled explanation of this question on Striver Youtube channel - Take You Forward
to find largest kth element search n-k smallest element

class Solution {
public:
    
    
    
    int kthSmallest(TreeNode* root, int k) {
       
       stack<TreeNode*> st;
        TreeNode *node = root;
        int cnt = 0;
        while(true){
            if(node != NULL){
                st.push(node);
                node = node->left;
                
            }
                
            else{
                if(st.empty())
                    break;
                
                node = st.top();
                cnt++;
                if(cnt==k){
                    return node->val;
               
                }
                st.pop();
                node = node->right;
                
            }
            
        }
        return -1;
        
    }
};
