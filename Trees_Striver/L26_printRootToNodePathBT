# here we use inorder traversal and maintain a vector and puch and pop nodes as we traverse.
# https://www.interviewbit.com/problems/path-to-given-node/   
question link

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

 bool getPath(TreeNode* root, vector<int> &arr, int x){
     if(!root)
     return false;
     arr.push_back(root->val);
     if(root->val == x)
     return true;
     if(getPath(root->left,arr,x) || getPath(root->right,arr,x))
     return true;

     arr.pop_back();
     return false;
 }
vector<int> Solution::solve(TreeNode* A, int B) {

    vector<int> arr;
    if(A==NULL)
    return arr;
    getPath(A,arr,B);
    return arr;
}



